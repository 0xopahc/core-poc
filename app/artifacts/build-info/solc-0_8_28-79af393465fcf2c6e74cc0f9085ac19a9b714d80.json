{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-79af393465fcf2c6e74cc0f9085ac19a9b714d80",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Escrow.sol": "project/contracts/Escrow.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/Escrow.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.2 <0.9.0;\n// Import OpenZeppelin contracts for security and standards\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n// Assuming OrderFactory is deployed separately; we'll interface with it\ninterface IOrderFactory {\n    struct Order {\n        // ... (match your Order struct from CartFactory.sol)\n        Item[] items;\n        uint256 total;\n        address customer;\n        address storeWallet;\n    }\n\n    struct Item {\n        uint id;\n        string name;\n        uint quantity;\n        uint price;\n    }\n\n    function orders(uint256) external view returns (Order memory);\n    function orderCount() external view returns (uint256);\n\n    // We'll add these functions to your OrderFactory later for status management\n    function updateOrderStatus(uint256 orderId, uint8 newStatus) external;\n    function getOrderStatus(uint256 orderId) external view returns (uint8);\n}\n\nabstract contract PaymentEscrow is Ownable, ReentrancyGuard {\n    IERC20 public paymentToken; // ERC20 token like USDC or PYUSD\n    IOrderFactory public orderFactory; // Reference to the deployed OrderFactory contract\n\n    // Enum for order statuses (add this to OrderFactory too)\n    enum OrderStatus {\n        Pending,\n        Paid,\n        Fulfilled,\n        Cancelled,\n        Refunded\n    }\n\n    // Mapping to track escrowed amounts per order\n    mapping(uint256 => uint256) public escrowedAmounts;\n\n    // Events for logging\n    event PaymentDeposited(\n        uint256 indexed orderId,\n        address customer,\n        uint256 amount\n    );\n    event FundsReleased(\n        uint256 indexed orderId,\n        address storeWallet,\n        uint256 amount\n    );\n    event RefundIssued(\n        uint256 indexed orderId,\n        address customer,\n        uint256 amount\n    );\n    event TokenUpdated(address newToken);\n\n    constructor(address _paymentToken, address _orderFactory) {\n        paymentToken = IERC20(_paymentToken);\n        orderFactory = IOrderFactory(_orderFactory);\n    }\n\n    // Function to update the payment token (e.g., switch from USDC to PYUSD) - only owner\n    function updatePaymentToken(address _newToken) external onlyOwner {\n        paymentToken = IERC20(_newToken);\n        emit TokenUpdated(_newToken);\n    }\n\n    // Customer deposits payment into escrow\n    function depositPayment(uint256 orderId) external nonReentrant {\n        IOrderFactory.Order memory order = orderFactory.orders(orderId);\n        require(order.customer == msg.sender, \"Only customer can deposit\");\n        require(order.total > 0, \"Invalid order\");\n        require(escrowedAmounts[orderId] == 0, \"Already paid\"); // Prevent double payment\n        require(\n            orderFactory.getOrderStatus(orderId) == uint8(OrderStatus.Pending),\n            \"Order not pending\"\n        );\n\n        // Transfer tokens from customer to this contract\n        bool success = paymentToken.transferFrom(\n            msg.sender,\n            address(this),\n            order.total\n        );\n        require(success, \"Token transfer failed\");\n\n        escrowedAmounts[orderId] = order.total;\n        orderFactory.updateOrderStatus(orderId, uint8(OrderStatus.Paid));\n\n        emit PaymentDeposited(orderId, msg.sender, order.total);\n    }\n\n    // Store releases funds after pickup confirmation\n    function releaseFunds(uint256 orderId) external nonReentrant {\n        IOrderFactory.Order memory order = orderFactory.orders(orderId);\n        require(order.storeWallet == msg.sender, \"Only store can release\");\n        uint256 amount = escrowedAmounts[orderId];\n        require(amount > 0, \"No funds escrowed\");\n        require(\n            orderFactory.getOrderStatus(orderId) == uint8(OrderStatus.Paid),\n            \"Order not paid\"\n        );\n\n        // Transfer to store\n        bool success = paymentToken.transfer(order.storeWallet, amount);\n        require(success, \"Token transfer failed\");\n\n        escrowedAmounts[orderId] = 0;\n        orderFactory.updateOrderStatus(orderId, uint8(OrderStatus.Fulfilled));\n\n        emit FundsReleased(orderId, order.storeWallet, amount);\n    }\n\n    // Refund function (callable by customer if not fulfilled within a timeout, or by store/owner)\n    function refund(uint256 orderId) external nonReentrant {\n        IOrderFactory.Order memory order = orderFactory.orders(orderId);\n        // Simple logic: Customer can refund if Paid but not Fulfilled (add timeout in prod)\n        require(\n            msg.sender == order.customer ||\n                msg.sender == order.storeWallet ||\n                msg.sender == owner(),\n            \"Unauthorized\"\n        );\n        uint256 amount = escrowedAmounts[orderId];\n        require(amount > 0, \"No funds escrowed\");\n        require(\n            orderFactory.getOrderStatus(orderId) == uint8(OrderStatus.Paid),\n            \"Invalid status for refund\"\n        );\n\n        // Transfer back to customer\n        bool success = paymentToken.transfer(order.customer, amount);\n        require(success, \"Token transfer failed\");\n\n        escrowedAmounts[orderId] = 0;\n        orderFactory.updateOrderStatus(orderId, uint8(OrderStatus.Refunded));\n\n        emit RefundIssued(orderId, order.customer, amount);\n    }\n\n    // Emergency withdraw for owner (in case of issues)\n    function emergencyWithdraw(uint256 amount) external onlyOwner {\n        bool success = paymentToken.transfer(owner(), amount);\n        require(success, \"Withdrawal failed\");\n    }\n}\n"
      }
    }
  }
}